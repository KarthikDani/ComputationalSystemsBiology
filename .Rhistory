# Load the necessary library
library(igraph)
# Set parameters for the Erdős–Rényi model
n <- 1000  # Number of nodes in the graph
p <- 0.2  # Probability of edge creation between each pair of nodes
# Generate the Erdős–Rényi model graph
random_graph <- erdos.renyi.game(n, p, directed = FALSE)
# Calculate the degree of each node
degree_list <- degree(random_graph)
# Plot the degree distribution as a histogram
hist(degree_list, breaks = 20, probability = TRUE, col = "blue",
xlab = "Degree (k)", ylab = "n(k)",
main = "Degree Distribution of ER Model Graph",
ylim = c(0, max(table(degree_list)) * 1.1))
# Add a line showing the theoretical Poisson distribution
# Mean of the Poisson distribution is np
lambda <- n * p
x <- 0:max(degree_list)
pois_prob <- dpois(x, lambda)
lines(x, pois_prob * length(degree_list), col = "red", lwd = 2)
# Add a legend
legend("topright", legend = c("Observed", "Poisson"), col = c("blue", "red"),
lwd = 2, bty = "n")
# Load the necessary library
library(igraph)
# Set parameters for the Erdős–Rényi model
n <- 1000  # Number of nodes in the graph
p <- 0.2  # Probability of edge creation between each pair of nodes
# Generate the Erdős–Rényi model graph
random_graph <- erdos.renyi.game(n, p, directed = FALSE)
# Calculate the degree of each node
degree_list <- degree(random_graph)
# Plot the degree distribution as a histogram
hist(degree_list, breaks = 20, probability = TRUE, col = "blue",
xlab = "Degree (k)", ylab = "n(k)",
main = "Degree Distribution of ER Model Graph",
ylim = c(0, max(table(degree_list)) * 1.1))
# Add a line showing the theoretical Poisson distribution
# Mean of the Poisson distribution is np
lambda <- n * p
x <- 0:max(degree_list)
pois_prob <- dpois(x, lambda)
lines(x, pois_prob * length(degree_list), col = "red", lwd = 2)
# Add a legend
legend("topright", legend = c("Observed", "Poisson"), col = c("blue", "red"),
lwd = 2, bty = "n")
# Load necessary library
library(ggplot2)
# Define the Michaelis-Menten equation function
michaelis_menten <- function(S, Vmax, Km) {
Vmax * S / (Km + S)
}
# Define parameters
Vmax <- 10  # Maximum rate of the reaction
Km <- 5     # Michaelis constant
# Define substrate concentration range
S_values <- seq(0, 30, by = 0.1)
# Calculate reaction rate (v) using the Michaelis-Menten equation
v_values <- michaelis_menten(S_values, Vmax, Km)
# Create a data frame with substrate concentrations and reaction rates
data <- data.frame(S = S_values, v = v_values)
# Plot the Michaelis-Menten equation graph using ggplot2
ggplot(data, aes(x = S, y = v)) +
geom_line(color = "blue") +
labs(
title = "Michaelis-Menten Equation",
x = "Substrate Concentration [S]",
y = "Reaction Rate (v)"
) +
theme_minimal()
# Load necessary library
library(ggplot2)
# Define the Michaelis-Menten equation function
michaelis_menten <- function(S, Vmax, Km) {
Vmax * S / (Km + S)
}
# Define parameters
Vmax <- 10  # Maximum rate of the reaction
Km <- 5     # Michaelis constant
# Define substrate concentration range
S_values <- seq(0, 30, by = 0.1)
# Calculate reaction rate (v) using the Michaelis-Menten equation
v_values <- michaelis_menten(S_values, Vmax, Km)
# Create a data frame with substrate concentrations and reaction rates
data <- data.frame(S = S_values, v = v_values)
# Plot the Michaelis-Menten equation graph using ggplot2
plot <- ggplot(data, aes(x = S, y = v)) +
geom_line(color = "blue") +  # Plot the Michaelis-Menten curve
# Highlight the half-saturation point
geom_point(aes(x = Km, y = Vmax / 2), color = "red", size = 3) +
# Add a horizontal line at Vmax / 2
geom_hline(yintercept = Vmax / 2, linetype = "dashed", color = "red") +
# Add a vertical line at Km
geom_vline(xintercept = Km, linetype = "dashed", color = "red") +
# Add text annotations for key points
annotate("text", x = Km, y = Vmax / 2 + 0.5, label = expression(K[m]), hjust = -0.1, color = "red") +
annotate("text", x = max(S_values) / 2, y = Vmax, label = expression(V[max]), hjust = -0.1, color = "blue") +
# Labels for the axes
labs(
title = "Michaelis-Menten Equation",
x = "Substrate Concentration [S]",
y = "Reaction Rate (v)"
) +
# Customize the plot theme
theme_minimal()
# Print the plot
plot
